#!/usr/bin/env ruby
# frozen_string_literal: true

# This script combines all markdown (.md) files in the /pages directory (recursively)
# into a single markdown file (full_site.md) at the project root.
# It generates a Table of Contents, adds clear headers for each page, and preserves all content.
# Usage: ruby scripts/generate_full_markdown.rb

require 'pathname'
require 'fileutils'

PAGES_DIR = File.expand_path('../pages', __dir__)
OUTPUT_FILE = File.expand_path('../build/assets/ai/full_site.md', __dir__)

# Find all .md files recursively in /pages
md_files = Dir.glob(File.join(PAGES_DIR, '**', '*.md')).sort

# Helper to create anchor links (GitHub-style)
def anchor_for(path)
  "page-" + path.gsub(/[^a-zA-Z0-9]+/, '').downcase
end

# Build TOC entries
entries = md_files.map do |file|
  rel_path = Pathname.new(file).relative_path_from(Pathname.new(PAGES_DIR)).to_s
  toc_anchor = anchor_for(rel_path)
  "- [Page: #{rel_path}](##{toc_anchor})"
end

toc = [
  "<!--",
  "  This file was auto-generated by scripts/generate_full_markdown.rb.",
  "  It combines all /pages/*.md files for use by AI agents (e.g., Cursor) to assist developers.",
  "  Each section below corresponds to a documentation page.",
  "-->",
  "",
  "# Table of Contents",
  "",
  *entries,
  ""
].join("\n")

# Build the full content
sections = md_files.map do |file|
  rel_path = Pathname.new(file).relative_path_from(Pathname.new(PAGES_DIR)).to_s
  anchor = anchor_for(rel_path)
  content = File.read(file)
  ["# Page: #{rel_path}", "<a id=\"#{anchor}\"></a>", "", content, ""].join("\n")
end

FileUtils.mkdir_p(File.dirname(OUTPUT_FILE))
File.write(OUTPUT_FILE, [toc, *sections].join("\n\n"))

puts "Generated #{OUTPUT_FILE} with #{md_files.size} pages."
